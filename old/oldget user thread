"""
        onlineUserSocket = s.socket()
        while not self.exit:
            # check if the client is changing server
            if self.changeServer == True:
                # if not connected?
                if self.serverConnectionActive == "":
                    onlineUserSocket.connect((self.paneLeftServers.get(), SERVERPORT))
                    onlineUserSocket.send(self.protocolString.encode(SOCKETENCODING))
                    self.serverConnectionActive = self.paneLeftServers.get()
                    print("previous connection = ", self.serverConnectionActive)
                    self.changeServer = False
                # otherwise tell current server client is leaving and change connection
                else:
                    onlineUserSocket.send("close".encode(SOCKETENCODING))
                    onlineUserSocket.connect((self.paneLeftServers.get(), SERVERPORT))
                    onlineUserSocket.send(self.protocolString.encode(SOCKETENCODING))
                    self.serverConnectionActive = self.paneLeftServers.get()
                    print("was connected", self.serverConnectionActive)
                    self.changeServer = False
            # otherwise get clients
            elif self.serverConnectionActive != "":
                print("clearing panel")
                self.paneLeftClients.clear()
                try:
                    print("getting users")
                    self.clients = js.loads(onlineUserSocket.recv(BUFFERSIZE).decode())
                    print(":users:")
                    print(self.clients)
                    self.paneLeftClients.clear()
                    for i in self.clients.keys():
                        self.paneLeftClients.insert(self.clients[i][0] + ", " + i)
                except Exception as e:
                    self.serverConnectionActive = ""

                    print(e.args)
            t.sleep(2)
        print("sending", ("close").encode(SOCKETENCODING))
        onlineUserSocket.send("close".encode(SOCKETENCODING))
        t.sleep(1)
        print("closing socket")
        onlineUserSocket.close()
        print("get online user thread is exiting")

"""

"""
class forceSendWindow(tk.toplevel):
    def __init__(self):
        super().__init__()

        # definning the window widgets
        self.ipLabel = tk.Label(text="usersIP:")
        self.messageLabel = tk.Label(text="message:")
        self.ipEntry = tk.Entry()
        self.messageEntry = tk.Entry()
        self.sendButton = tk.Button(text="send!")
        self.closeButton = tk.Button(text="close")

        #setting them to a grid
        self.ipLabel.grid(row=0,column=0)
        self.messageLabel.grid(row=1,column=0)
        self.ipEntry.grid(row=0,column=1)
        self.messageEntry.grid(row=1,column=1)
        self.sendButton.grid(row=2,column=0)
        self.closeButton.grid(row=2,column=1)

    # defining the send message function (will be used in the main window)
    def sendMessage():
        pass
    # function to close the window if not needed   
    def closeWindow():
        self.destroy()
"""   