"""
#starting window class
class login(Tk):
    def __init__(self, start_up):
        super().__init__()

        #assigning passed values
        self.start_up = start_up

        #variables for window
        self.login = ''
        self.password =''
        
        #create gui widgets
        self.tip_label = Label(self, text="enter login details")
        self.login_box = Entry(self)
        self.password_box = Entry(self, show="#")
        self.enter_btn = Button(self, text="enter", command=self.Enter)

        #packing all widgets
        self.tip_label.pack(fill=X)
        self.login_box.pack(fill=X)
        self.password_box.pack(fill=X)
        self.enter_btn.pack(fill=X)


        #kill window if the file exists
        try:
            open("config/login.json","r")
            self.destroy()
            return
        except FileNotFoundError:
            return

        #start the main loop
        mainloop()


    #called when enter button 
    def Enter(self):
        #get details from form/window
        self.login = self.login_box.get().encode("ascii")
        self.password = str(hash(self.password_box.get())).encode("ascii")
        
        #save them to a file
        temp_login = {
            "login":self.login.decode("utf-8"),
            "psk":self.password.decode("utf-8")
        }

        open("config/login.json","w").write(js.dumps(temp_login))
        self.destroy()

class serverSelection(Tk):
    def __init__(self):
        super().__init__()

        #open up a list of servers
        self.options = js.load(open("config/servers.json","r"))

        self.selection_list = scrollListBox(self)

        for i in self.options:
            self.selection_list.insert(END, self.options[i])

        self.selection_list.bind("<Button-1>", self.select)

        self.selection_list.pack(fill=BOTH, expand=True)
        mainloop()
    
    def select(self):
        self.server = self.selection_list.get(ACTIVE)
        self.destroy()
        pass


        #create the server selection screen
        #servers are added localy unless a future update allows servers to share servers

"""

"""
class Main_Window(Tk):
    def __init__(self):
        super().__init__()

        #defining widgets
        self.splitView = PanedWindow(orient=HORIZONTAL)
        self.contactList = scrollListBox(self.splitView)
        self.messagePane = MessageView(self.splitView)
    
        #pack widgets
        self.contactList.pack(fill=BOTH, expand=True)
        self.messagePane.pack(fill=BOTH, expand=True)
        self.splitView.pack(fill=BOTH, expand=True)

        #create thread that 


        #activate mainloop
        mainloop()

    def serverThread(self):
        pass
        
"""



"""

def Register(self):
        print("reg pressed")

        #get infomation
        self.server = self.server_select.get(ACTIVE).encode("ascii")
        self.login = self.login_box.get().encode("ascii")
        self.password = hash(self.password_box.get()).encode("ascii")

        #create socket object to send request to register a user 
        sock = s.socket()
        sock.connect((self.server[0], self.port))

        #send register message to the server
        sock.send("REG ".encode("ascii") + self.login + self.password)
        response = sock.recv(1024)

        #error reporting to the user
        if response == "USER_EXISTS":
            pass#error_box = messagebox()
        else:
            sock.close()
            self.destroy()


                

        #close the socket after we're done

"""



